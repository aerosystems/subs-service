// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/aerosystems/subs-service/internal/config"
	"github.com/aerosystems/subs-service/internal/http"
	"github.com/aerosystems/subs-service/internal/infrastructure/rest"
	"github.com/aerosystems/subs-service/internal/infrastructure/rpc"
	"github.com/aerosystems/subs-service/internal/models"
	"github.com/aerosystems/subs-service/internal/repository"
	"github.com/aerosystems/subs-service/internal/repository/pg"
	"github.com/aerosystems/subs-service/internal/usecases"
	"github.com/aerosystems/subs-service/pkg/gorm_postgres"
	"github.com/aerosystems/subs-service/pkg/logger"
	"github.com/aerosystems/subs-service/pkg/monobank"
	"github.com/sirupsen/logrus"
	"gorm.io/gorm"
)

// Injectors from wire.go:

//go:generate wire
func InitApp() *App {
	logger := ProvideLogger()
	logrusLogger := ProvideLogrusLogger(logger)
	config := ProvideConfig()
	baseHandler := ProvideBaseHandler(logrusLogger, config)
	entry := ProvideLogrusEntry(logger)
	db := ProvideGormPostgres(entry, config)
	subscriptionRepo := ProvideSubscriptionRepo(db)
	priceRepo := ProvidePriceRepo()
	subscriptionUsecase := ProvideSubscriptionUsecase(subscriptionRepo, priceRepo)
	subscriptionHandler := ProvideSubscriptionHandler(baseHandler, subscriptionUsecase)
	invoiceRepo := ProvideInvoiceRepo(db)
	acquiring := ProvideMonobankAcquiring(config)
	monobankStrategy := ProvideMonobankStrategy(acquiring, config)
	v := ProvidePaymentMap(monobankStrategy)
	paymentUsecase := ProvidePaymentUsecase(invoiceRepo, priceRepo, v)
	paymentHandler := ProvidePaymentHandler(baseHandler, paymentUsecase)
	server := ProvideHttpServer(logrusLogger, config, subscriptionHandler, paymentHandler)
	rpcServerServer := ProvideRpcServer(logrusLogger, subscriptionUsecase)
	app := ProvideApp(logrusLogger, config, server, rpcServerServer)
	return app
}

func ProvideApp(log *logrus.Logger, cfg *config.Config, httpServer *HttpServer.Server, rpcServer *RpcServer.Server) *App {
	app := NewApp(log, cfg, httpServer, rpcServer)
	return app
}

func ProvideLogger() *logger.Logger {
	loggerLogger := logger.NewLogger()
	return loggerLogger
}

func ProvideConfig() *config.Config {
	configConfig := config.NewConfig()
	return configConfig
}

func ProvideRpcServer(log *logrus.Logger, subscriptionUsecase RpcServer.SubscriptionUsecase) *RpcServer.Server {
	server := RpcServer.NewServer(log, subscriptionUsecase)
	return server
}

func ProvidePaymentHandler(baseHandler *rest.BaseHandler, paymentUsecase rest.PaymentUsecase) *rest.PaymentHandler {
	paymentHandler := rest.NewPaymentHandler(baseHandler, paymentUsecase)
	return paymentHandler
}

func ProvideSubscriptionHandler(baseHandler *rest.BaseHandler, subscriptionUsecase rest.SubscriptionUsecase) *rest.SubscriptionHandler {
	subscriptionHandler := rest.NewSubscriptionHandler(baseHandler, subscriptionUsecase)
	return subscriptionHandler
}

func ProvidePaymentUsecase(invoiceRepo usecases.InvoiceRepository, priceRepo usecases.PriceRepository, strategies map[models.PaymentMethod]usecases.AcquiringOperations) *usecases.PaymentUsecase {
	paymentUsecase := usecases.NewPaymentUsecase(invoiceRepo, priceRepo, strategies)
	return paymentUsecase
}

func ProvideSubscriptionUsecase(subscriptionRepo usecases.SubscriptionRepository, priceRepo usecases.PriceRepository) *usecases.SubscriptionUsecase {
	subscriptionUsecase := usecases.NewSubscriptionUsecase(subscriptionRepo, priceRepo)
	return subscriptionUsecase
}

func ProvideSubscriptionRepo(client *gorm.DB) *pg.SubscriptionRepo {
	subscriptionRepo := pg.NewSubscriptionRepo(client)
	return subscriptionRepo
}

func ProvideInvoiceRepo(client *gorm.DB) *pg.InvoiceRepo {
	invoiceRepo := pg.NewInvoiceRepo(client)
	return invoiceRepo
}

func ProvidePriceRepo() *repository.PriceRepo {
	priceRepo := repository.NewPriceRepo()
	return priceRepo
}

// wire.go:

func ProvideHttpServer(log *logrus.Logger, cfg *config.Config, subscriptionHandler *rest.SubscriptionHandler, paymentHandler *rest.PaymentHandler) *HttpServer.Server {
	return HttpServer.NewServer(log, cfg.AccessSecret, subscriptionHandler, paymentHandler)
}

func ProvideLogrusEntry(log *logger.Logger) *logrus.Entry {
	return logrus.NewEntry(log.Logger)
}

func ProvideLogrusLogger(log *logger.Logger) *logrus.Logger {
	return log.Logger
}

func ProvideGormPostgres(e *logrus.Entry, cfg *config.Config) *gorm.DB {
	db := GormPostgres.NewClient(e, cfg.PostgresDSN)
	if err := db.AutoMigrate(models.Subscription{}, models.Invoice{}); err != nil {
		panic(err)
	}
	return db
}

func ProvideBaseHandler(log *logrus.Logger, cfg *config.Config) *rest.BaseHandler {
	return rest.NewBaseHandler(log, cfg.Mode)
}

func ProvidePaymentMap(monobankStrategy *usecases.MonobankStrategy) map[models.PaymentMethod]usecases.AcquiringOperations {
	return map[models.PaymentMethod]usecases.AcquiringOperations{models.MonobankPaymentMethod: monobankStrategy}
}

func ProvideMonobankStrategy(acquiring *monobank.Acquiring, cfg *config.Config) *usecases.MonobankStrategy {
	return usecases.NewMonobankStrategy(acquiring, cfg.MonobankRedirectUrl, cfg.MonobankWebHookUrl, monobank.USD)
}

func ProvideMonobankAcquiring(cfg *config.Config) *monobank.Acquiring {
	return monobank.NewAcquiring(cfg.MonobankToken)
}
